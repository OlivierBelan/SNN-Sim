[Runner_Info]
# used on in SNN
run_time=6
# meaning that the snn runner will run for run_time + run_time_margin time steps
run_time_margin=3
dt = 1.0


runner_type = Reinforcement
# used in Reinforcement only
online = False

# neuron_reset type: voltage_reset, threshold_reset
neuron_reset = voltage_reset

; # BEST FOR VOLTAGE DECODING -> no output threshold + beta decay

# lif or beta
decay_method = lif


# The layer to record (input, hidden, output)
record_layer = output
# spike or voltage or augmented
record = augmented

# poisson, binomial, exact, rate, combinatorial and latency
encoder = combinatorial
# rate or voltage or augmented or max_spike or coeff
decoder = augmented



[Exact_Encoder]
max_nb_spikes = 5
spike_amplitude = 100

[Poisson_Encoder]
max_nb_spikes = 5
spike_amplitude = 100
# reduce the noise - higher value = less noise
spike_rate = 10

[Binomial_Encoder]
max_nb_spikes = 5
spike_amplitude = 100
# higher value = less noise
reduce_noise = 1


[Rate_Encoder]
spike_amplitude = 100

[Latency_Encoder]
spike_amplitude = 100

[Rate_Decoder]
# (eg if run_time = 50 and nb_neurons_per_categories = 10 and ratio_max_output_spike = 0.20 
# so formula is (run_time*nb_neurons_per_categories*ratio_max_output_spike)/nb_neurons_per_categories 
# then each categorie output neuron can spike (or will be considered) 50*10*0.20 = 100 times or (50*10*0.20)/10 = 10 spikes per neuron category for 50 time steps)
ratio_max_output_spike = 1.0

[Voltage_Decoder]
disable_output_threshold = True
# can be number or threshold
voltage_max = 10.0
# can be number or voltage
voltage_min = 0.0

[Combinatorial_Encoder]
spike_amplitude = 100
# Will divide the number of combinaison by this number but will increase the number of spike per combinaison
# so improve the meaning of combinaison but decrease the number of combinaison
# number of comibinaison is -> 2^(run_time/combinatorial_factor)[:combinatorial_combinaison_size]
# has to be integer and > 0
combinatorial_factor = 1
combinatorial_combinaison_size_max=64
combinatorial_combinaison_size=64
combinatorial_combinaison_noise=0.0
combinatorial_combinaison_noise_decay=0.0
combinatorial_roll = True


[Augmented_Decoder]
spike_max = 800
spike_distribution_run = 400
spike_distribution_importance = 400
# positive, absolute, raw (positive and negative)
spike_type = positive
# first_index, by_index, all, nothing 
importance_type = all
# ascending, descending
linear_spike_importance_type = descending


[NEURO_EVOLUTION]
verbose = True
# maximize, minimize or closest_to_zero
optimization_type = maximize
algo_name = NES-evosax

[Record]
criteria=best_episode_raw_score mean_episode_raw_score
sorted_by=best_episode_raw_score

[Genome_NN]
inputs = 2
hiddens = 16
hiddens_active = 16
outputs = 1
inputs_multiplicator = 1
hiddens_multiplicator = 1
outputs_multiplicator = 1

is_self_neuron_connection = True
# Hidden layer can be used as a feedback to another hidden layer, 
# e.g H1->H2 will considered as a feedback and forward connection
is_inter_hidden_feedback = False
is_layer_normalization = False

# architecture = I->H1, H1->H2, H2->O
architecture = I->H1, I->O, H1->H1, H1->O, O->H1, O->O
# architecture = I->I, I->H1, I->O, H1->I, H1->H1, H1->O, O->I, O->H1, O->O
# architecture = I->H1, I->H2, I->O, I->I, H1->O, H1->H1, H1->H2, H1->I, H2->O, H2->H1, H2->H2, H2->I, O->O, O->I, O->H1, O->H2
network_type = SNN


[NES-evosax]
pop_size = 128
verbose = False

sigma_init = 1.0
temperature = 0.0
mean_decay = 0.0


[weight_synapse_parameter]
max = 0.0
min = 0.0

mu = 0.0
mu_max = 0.0
mu_min = 0.0

sigma = 0.0
sigma_max = 0.0
sigma_min = 0.0
sigma_decay = 1.0

[input_current_neuron_parameter]
max = 0.0
min = 0.0

mu = 0.0
mu_max = 0.0
mu_min = 0.0

sigma = 0.0
sigma_max = 0.0
sigma_min = 0.0
sigma_decay = 1.0


[voltage_neuron_parameter]
max = 0.0
min = 0.0

mu = 0.0
mu_max = 0.0
mu_min = 0.0

sigma = 0.0
sigma_max = 0.0
sigma_min = 0.0
sigma_decay = 1.0


[threshold_neuron_parameter]
max = 0.1
min = 0.1

mu = 0.0
mu_max = 0.0
mu_min = 0.0

sigma = 0.0
sigma_max = 0.0
sigma_min = 0.0
sigma_decay = 1.0


[tau_neuron_parameter]
max = 200.0
min = 200.0

mu = 0.0
mu_max = 0.0
mu_min = 0.0

sigma = 0.0
sigma_max = 0.0
sigma_min = 0.0
sigma_decay = 1.0


; [refractory_neuron_parameter]
; mutate_rate = 0.8
; max = 0.0
; min = 0.0

; mu = 0.0   
; mu_max = 0.0
; mu_min = 0.0

; sigma = 0.0
; sigma_max = 0.0
; sigma_min = 0.0
; sigma_decay = 0.999


; [delay_synapse_parameter]
; mutate_rate = 0.8
; max = 0.0
; min = 0.0

; mu = 0.0
; mu_max = 0.0
; mu_min = 0.0

; sigma = 0.0
; sigma_max = 0.0
; sigma_min = 0.0
; sigma_decay = 0.999
